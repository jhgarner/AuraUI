###
This document is WIP and a lot of the UI is still missing. I think it's far
enough along that I'll add it to the repo.

This is a pretty complicated one. You should check out the htop.txt example
first before diving in here.

I really leaned into the mentality of just trusting the renderer on this one.
If you look at the schema, it makes no reference to headers or sidebars.
Instead, it provides a lot of information and various heuristics do the rest. Of
course it's much easier to claim heuristics can solve all of these problems than
it is to actually create the heuristics.

One argument for why the renderer should have so much control is that there are
a ton of rendering targets. A header bar makes sense when viewing it in your
browser but doesn't make sense when viewed in a cli.


Schema:
###

Server = ServerC (*id Int) (name String -max 32 -min 2) (icon IconOrName) (channels [Channel]) (online [User]) (offline [User])

Server display as
  {icon, fstring -string "$name", channels}

Server interact as
  !channels -elements

IconOrName = Icon (icon String)
           # I have no idea what the max on this one is. I'm going to guess 4?
           | Name (name String -maxLength 4)

IconOrName display as
  Icon display as
    Icon -path "$icon" -ratio "1:1"
  Name display as
    fstring -string "$name"

# Max width pulled from discord website
Channel = TextChannel (name String -maxWidth 32) (messages [UserMessage])
        | VoiceChannel (name String -maxWidth 32) (voices [Voices])

Channel display as
  TextChannel display as
    {fstring -string "$name", Icon -path "hashtag.png", messages}
  VoiceChannel display as
    {fstring -string "$name", Icon -path "speaker.png", voices}

Channel interact as
  # TODO is this worth listing here or is it something else??
  !{Icon -path "notif.png"} -help "Muting a channel..."
  !!messages -append -partial [message] -elements

Reaction = Reacted (num Int)
         | NotReacted (num Int)

Reaction display as
  Reacted display as
    {fstring -string "$num"}
  NotReacted display as
    {fstring -string "$num"}

Reacted interact as
  !Constructor -all

UserMessage = UserMessage
              (icon String)
              # The max width is pulled from Discord docs
              (name String -maxWidth 32)
              (when Time)
              # TODO emoji should probably be defined elsewhere instead of
              # looking like a builtin.
              (reactions Map -key emoji -value Reaction)
              (message Message)


# Search bars shouldn't be mentioned in the schema because they aren't data.
# That means searchable data needs to be marked somehow so that the renderer
# knows to contact the backend. The backend would then send back results and
# maybe specify parts of the results that matched the searched thing. I have no
# idea what searching over other types would look like...
UserMessage searchable as
  String

UserMessage display as
  {Icon -path icon -ratio "1:1", fstring -string "$name", Time -relative -time when,
  message, reactions}

UserMessage interact as
  !myReactions
  !message

User = UserC
        (*id Int)
        (name String)
        (profile String)
        (note String)
        (servers [Server])
        (users [User])

User interact as
  !{fstring -string "block"}
  !note

User display as
  {fstring -string "$name", Image -path "$profile", fstring -string "$note",
   servers, users}


AMessage = TextM (*id Int) (text String)
        | ImageM (*id Int) (image Image)
        | AttachmentM (*id Int) (attach Attachment)
        # *Message points to another message inside the given path.
        | ReplyM (*id Int) (text String) (to *Message -inPath "../")

AMessage Interact as
  !{Icon -path "trash.png" -help "delete message"} -hint {destructive, remove}
  !Constructor -all
  TextM interect as
    !text -withEmojis
  ImageM interact as
    !image -from filePicker
  AttachmentM interact as
    !attach -from filePicker
  ReplyM interact as
    !id
    !text -withEmojis
    !to

Message = MyMessage (msg AMessage)
        | NotMyMessage (msg AMessage)

Message interact as
  MyMessage interact as
    !msg

Voice = VoiceC (inChat [User]) (chatId Int)
Voice display as
  # Stream is a widget which handles streaming audio and/or video. A renderer
  # with a working stream widget should let the user continue a stream in the
  # background. I'm kind of worried though because streams have a nontrivial
  # amount of UI in them that isn't directly controlled by the renderer.
  {inChat, Stream -id chatId}

Discord = DiscordC (servers [Server]) (me Me)
Discord display as
  {servers, me}

Me = Me (me User)
Me display as
  me
Me interact as
  Icon -path "mute.png"
  Icon -path "deafen.png"


# Everything below here is the data sent to the renderer.
DiscordC [
  ServerC
    (name "Mines Movie Squad")
    (icon "mms.png")
    (channels [
      ChannelC
        (icon "hashtag.png")
        (name "General")
        (messages [
          UserMessageC
            (icon "jkrmnj.png")
            (name "jkrmnj")
            (when utcTimeStampHere)
            (messages [
              TextM (text "Take a look at this!"),
              ImageM (image "userUpload-01234.png")
            ]),
          UserMessageC
            (icon "Zatton.png")
            (name "Zatton")
            (when utcTimeStampHere)
            (messages [
              TextM (text "Wow, take a look at this docx file!"),
              Attachment (attach "userUpload-01234.docx")
            ])
        ])
    ]),
  ...
]

###
How?

UserMessage:
Since there are a static number of elements in UserMessage, we default to a
horizontal orientation for them. Since messages can be extremely long and all of
the elements need to be as tall as the tallest element, we'll put messages below
the other elements (aka make messages vertical). Things are almost good, but
it's no longer clear that the messages are related to the other elements. To fix
that, we'll make the icon 2 lines tall so that it's next to the username and the
first line of the message.

We can assume that only 1 line is for the time and the username in most
cases because the username is a max of 32 characters and the time is a locale
defined maximum width.

The UI above makes it sound like every single message has the name/avatar
duplicated all over the place. Although that's a valid way to render it, there
are other options. A renderer might detect multiple userMessages in a row with
similar information. Since the list can't be filtered or reordered, the renderer
is allowed to remove duplicate information to make the interface less cluttered.
If the avatar or username could be interacted with, then they wouldn't be
removable from the list.

???
You might be thinking "but wait, I can click on the avatar and username!".
Although you're right, that's not an interactive element. Instead, that is a
pointer to data about the user.
???

In the htop example, a list was interpreted to be a table. The discord ui isn't
interpreted as a table because it is not filterable or sortable. Since the
renderer won't be required to arbitrarily reorder elements in the list, it has a
lot of freedom about how to place them.

Side Bars:
Discord has two nested panels on the left. The first one contains a list of
servers and the second contains a list of rooms.

The renderer will detect that each channel contains a distracting element and
that the channels want as much space as possible. It can then decide to only
show one channel at a time. Now it needs a way to help the user switch between
channels. The renderer will try to find a subset of fields in the channel that
can help the user identify which one they want to click on. Since the leftmost
fields are the most identifiable, it will try to pick those for the subset
first. The name has a max size of 32 characters so it picks that as part of the
subset. It also grabs the icon to pull in because it fits.

The server list takes a similar chain of reasoning. In this case, the icons are
the most identifiable so they appear on their own. Since the name is strongly
identifiable too but might take up too much space, it appears on hover.


Header Bar:
The header bar is created by combining identifiable information with interactive
elements.

Add/Create server UI:
TODO
This offers some unique challenges. On the one hand, I'd like to use a similar
technique to the new messages ui. The problem though is that servers can be
created or searched and the ui around that is pretty flashy and complicated.

Home:
TODO
The existing ui is kind of weird.

User Profiles:
TODO
These might require adding new features to the schema.
###
